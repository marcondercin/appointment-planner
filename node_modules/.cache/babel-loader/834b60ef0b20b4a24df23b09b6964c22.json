{"ast":null,"code":"var _jsxFileName = \"/Users/marc/Documents/Development/Projects/appointment-planner/src/containers/contactsPage/ContactsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from '../../components/contactForm/ContactForm';\nimport { TileList } from '../../components/tileList/TileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = props => {\n  _s();\n\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const [email, setEmail] = useState('');\n  const [isDuplicate, setIsDuplicate] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    if (!isDuplicate) {\n      props.addContact(name, phone, email);\n      setName('');\n      setPhone('');\n      setEmail('');\n    } else {\n      alert(\"That name already exists.\");\n    }\n  };\n\n  useEffect(() => {\n    setIsDuplicate(false);\n    const nameCheck = props.contacts.find(element => element.name === name);\n\n    if (nameCheck) {\n      alert('That name already exists.');\n      setIsDuplicate(true);\n    }\n  }, [props.contacts, name]);\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        phone: phone,\n        email: email,\n        setName: setName,\n        setPhone: setPhone,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        tiles: props.contacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactsPage, \"RdI3LyrKuvO9Gqn84BBEmFcaw4Y=\");\n\n_c = ContactsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"sources":["/Users/marc/Documents/Development/Projects/appointment-planner/src/containers/contactsPage/ContactsPage.js"],"names":["React","useState","useEffect","ContactForm","TileList","ContactsPage","props","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","addContact","alert","nameCheck","contacts","find","element"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,0CAA5B;AACA,SAASC,QAAT,QAAyB,oCAAzB;;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AACrC;AACF;AACA;AACA;AACE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,KAAD,CAA9C;;AAEA,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA;AACJ;AACA;AACA;;AACI,QAAI,CAACJ,WAAL,EAAkB;AAChBP,MAAAA,KAAK,CAACY,UAAN,CAAiBX,IAAjB,EAAuBE,KAAvB,EAA8BE,KAA9B;AACAH,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,KALD,MAKO;AACLO,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACD;AAEF,GAfD;;AAiBAjB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,cAAc,CAAC,KAAD,CAAd;AACA,UAAMM,SAAS,GAAGd,KAAK,CAACe,QAAN,CAAeC,IAAf,CAAoBC,OAAO,IAAIA,OAAO,CAAChB,IAAR,KAAiBA,IAAhD,CAAlB;;AACA,QAAIa,SAAJ,EAAe;AACbD,MAAAA,KAAK,CAAC,2BAAD,CAAL;AACAL,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAPQ,EAON,CAACR,KAAK,CAACe,QAAP,EAAiBd,IAAjB,CAPM,CAAT;AASA;AACF;AACA;AACA;;AAEE,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AACE,QAAA,IAAI,EAAEA,IADR;AAEE,QAAA,KAAK,EAAEE,KAFT;AAGE,QAAA,KAAK,EAAEE,KAHT;AAIE,QAAA,OAAO,EAAEH,OAJX;AAKE,QAAA,QAAQ,EAAEE,QALZ;AAME,QAAA,QAAQ,EAAEE,QANZ;AAOE,QAAA,YAAY,EAAEG;AAPhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AACE,QAAA,KAAK,EAAET,KAAK,CAACe;AADf;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAhEM;;GAAMhB,Y;;KAAAA,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ContactForm } from '../../components/contactForm/ContactForm';\r\nimport { TileList } from '../../components/tileList/TileList';\r\n\r\nexport const ContactsPage = (props) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    if (!isDuplicate) {\r\n      props.addContact(name, phone, email);\r\n      setName('');\r\n      setPhone('');\r\n      setEmail('');\r\n    } else {\r\n      alert(\"That name already exists.\");\r\n    }\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsDuplicate(false);\r\n    const nameCheck = props.contacts.find(element => element.name === name);\r\n    if (nameCheck) {\r\n      alert('That name already exists.');\r\n      setIsDuplicate(true);\r\n    }\r\n  }, [props.contacts, name]);\r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2>\r\n        <ContactForm \r\n          name={name}\r\n          phone={phone}\r\n          email={email}\r\n          setName={setName}\r\n          setPhone={setPhone}\r\n          setEmail={setEmail}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList \r\n          tiles={props.contacts}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}